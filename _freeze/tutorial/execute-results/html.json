{
  "hash": "a90bca7ae0aa7e0a9ff8494df7bb069d",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Full tutorial\"\n---\n\n\n\n\n\n# Importing the data\n\nIn this section we will use the data in the ex_data folder.\nMore ressources on data import are available in [this vignette](https://plant-functional-trait-course.github.io/fluxible/articles/data-prep.html) on the fluxible website.\n\n\n## Importing log file\n\nImporting the log and turning it into a dataframe with chamber ID (port nb), chamber closing time and re-opening time.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\n# building col names\nchamber_colnames <- c(\n    \"port\", \"valvestatus\", \"chamberstatus\",\n    \"aux1\", \"aux2\", \"aux3\", \"aux4\", \"aux5\",\n    \"temperaturev\", \"pressure\"\n    )\nlog_colnames <- c(\n    \"epochtime\",\n    rep(chamber_colnames, times = 12)\n)\n\nchamber_log_read <- list.files(\n    \"ex_log\",\n    full.names = TRUE\n) |>\n    map_dfr(\n        read_log,\n        col_names = log_colnames\n    )\n#> Warning: Duplicated column names deduplicated: 'port' => 'port_1' [12],\n#> 'valvestatus' => 'valvestatus_1' [13], 'chamberstatus' => 'chamberstatus_1'\n#> [14], 'aux1' => 'aux1_1' [15], 'aux2' => 'aux2_1' [16], 'aux3' => 'aux3_1'\n#> [17], 'aux4' => 'aux4_1' [18], 'aux5' => 'aux5_1' [19], 'temperaturev' =>\n#> 'temperaturev_1' [20], 'pressure' => 'pressure_1' [21], 'port' => 'port_2'\n#> [22], 'valvestatus' => 'valvestatus_2' [23], 'chamberstatus' =>\n#> 'chamberstatus_2' [24], 'aux1' => 'aux1_2' [25], 'aux2' => 'aux2_2' [26],\n#> 'aux3' => 'aux3_2' [27], 'aux4' => 'aux4_2' [28], 'aux5' => 'aux5_2' [29],\n#> 'temperaturev' => 'temperaturev_2' [30], 'pressure' => 'pressure_2' [31],\n#> 'port' => 'port_3' [32], 'valvestatus' => 'valvestatus_3' [33], 'chamberstatus'\n#> => 'chamberstatus_3' [34], 'aux1' => 'aux1_3' [35], 'aux2' => 'aux2_3' [36],\n#> 'aux3' => 'aux3_3' [37], 'aux4' => 'aux4_3' [38], 'aux5' => 'aux5_3' [39],\n#> 'temperaturev' => 'temperaturev_3' [40], 'pressure' => 'pressure_3' [41],\n#> 'port' => 'port_4' [42], 'valvestatus' => 'valvestatus_4' [43], 'chamberstatus'\n#> => 'chamberstatus_4' [44], 'aux1' => 'aux1_4' [45], 'aux2' => 'aux2_4' [46],\n#> 'aux3' => 'aux3_4' [47], 'aux4' => 'aux4_4' [48], 'aux5' => 'aux5_4' [49],\n#> 'temperaturev' => 'temperaturev_4' [50], 'pressure' => 'pressure_4' [51],\n#> 'port' => 'port_5' [52], 'valvestatus' => 'valvestatus_5' [53], 'chamberstatus'\n#> => 'chamberstatus_5' [54], 'aux1' => 'aux1_5' [55], 'aux2' => 'aux2_5' [56],\n#> 'aux3' => 'aux3_5' [57], 'aux4' => 'aux4_5' [58], 'aux5' => 'aux5_5' [59],\n#> 'temperaturev' => 'temperaturev_5' [60], 'pressure' => 'pressure_5' [61],\n#> 'port' => 'port_6' [62], 'valvestatus' => 'valvestatus_6' [63], 'chamberstatus'\n#> => 'chamberstatus_6' [64], 'aux1' => 'aux1_6' [65], 'aux2' => 'aux2_6' [66],\n#> 'aux3' => 'aux3_6' [67], 'aux4' => 'aux4_6' [68], 'aux5' => 'aux5_6' [69],\n#> 'temperaturev' => 'temperaturev_6' [70], 'pressure' => 'pressure_6' [71],\n#> 'port' => 'port_7' [72], 'valvestatus' => 'valvestatus_7' [73], 'chamberstatus'\n#> => 'chamberstatus_7' [74], 'aux1' => 'aux1_7' [75], 'aux2' => 'aux2_7' [76],\n#> 'aux3' => 'aux3_7' [77], 'aux4' => 'aux4_7' [78], 'aux5' => 'aux5_7' [79],\n#> 'temperaturev' => 'temperaturev_7' [80], 'pressure' => 'pressure_7' [81],\n#> 'port' => 'port_8' [82], 'valvestatus' => 'valvestatus_8' [83], 'chamberstatus'\n#> => 'chamberstatus_8' [84], 'aux1' => 'aux1_8' [85], 'aux2' => 'aux2_8' [86],\n#> 'aux3' => 'aux3_8' [87], 'aux4' => 'aux4_8' [88], 'aux5' => 'aux5_8' [89],\n#> 'temperaturev' => 'temperaturev_8' [90], 'pressure' => 'pressure_8' [91],\n#> 'port' => 'port_9' [92], 'valvestatus' => 'valvestatus_9' [93], 'chamberstatus'\n#> => 'chamberstatus_9' [94], 'aux1' => 'aux1_9' [95], 'aux2' => 'aux2_9' [96],\n#> 'aux3' => 'aux3_9' [97], 'aux4' => 'aux4_9' [98], 'aux5' => 'aux5_9' [99],\n#> 'temperaturev' => 'temperaturev_9' [100], 'pressure' => 'pressure_9' [101],\n#> 'port' => 'port_10' [102], 'valvestatus' => 'valvestatus_10' [103],\n#> 'chamberstatus' => 'chamberstatus_10' [104], 'aux1' => 'aux1_10' [105], 'aux2'\n#> => 'aux2_10' [106], 'aux3' => 'aux3_10' [107], 'aux4' => 'aux4_10' [108],\n#> 'aux5' => 'aux5_10' [109], 'temperaturev' => 'temperaturev_10' [110],\n#> 'pressure' => 'pressure_10' [111], 'port' => 'port_11' [112], 'valvestatus' =>\n#> 'valvestatus_11' [113], 'chamberstatus' => 'chamberstatus_11' [114], 'aux1' =>\n#> 'aux1_11' [115], 'aux2' => 'aux2_11' [116], 'aux3' => 'aux3_11' [117], 'aux4'\n#> => 'aux4_11' [118], 'aux5' => 'aux5_11' [119], 'temperaturev' =>\n#> 'temperaturev_11' [120], 'pressure' => 'pressure_11' [121]\n#> \n#> ── Column specification ────────────────────────────────────────────────────────\n#> cols(\n#>   .default = col_double()\n#> )\n#> ℹ Use `spec()` for the full column specifications.\n# read_log(\"ex_log/FRMonitor_0012.log\", col_names = log_colnames)\n# repeated colnames are normal\nchamber_log_all <- chamber_log_read |>\n    pivot_longer(!c(epochtime), names_to = c(\".value\", \"variable\"), names_sep = \"_\") |>\n    filter(\n        port %in% c(1:12) # we filter out all the rows with port -1\n    ) |>\n    arrange(epochtime) |> # just to be sure\n    mutate( # without grouping\n        change_id = consecutive_id(port, chamberstatus, valvestatus), #detecting all changes in status\n        datetime = as_datetime(epochtime) # we work in datetime\n    ) |>\n    filter(\n        # & chamberstatus %in% c(1:3) # very conservative, we can adjust the focus window later in flux_fitting\n        chamberstatus == 1\n        & valvestatus == 10\n    ) |>\n    mutate(\n        measurement_id = consecutive_id(change_id) # just getting rid of the missing id after filter\n        )\n#> Warning: Expected 2 pieces. Missing pieces filled with `NA` in 10 rows [1, 2, 3, 4, 5,\n#> 6, 7, 8, 9, 10].\n    \nchamber_log <- chamber_log_all |>\n    mutate(\n        .by = c(measurement_id),\n        closing = min(datetime),\n        opening = max(datetime)\n    ) |>\n    select(measurement_id, port, closing, opening) |>\n    distinct()\n\n# We make a separate df for temp and pressure so we keep the 4 seconds reads\nchamber_temp_pres <- chamber_log_all |>\n    mutate(\n        air_temp = temperaturev * 15, # need to ask the exact conversion factor, for now this one makes sense\n        pressure = pressure / 101.325 # need atm for fluxible\n    ) |>\n    select(datetime, air_temp, pressure)\n\n# View(chamber_log)\n```\n:::\n\n\n\nPossible improvements\n\n- take into account the chamber status better and  use it to by-pass the start and end cuts in flux_fitting. Opening and closing status would be \"cut\" (not used for fitting but visible on the plot), and fully open would be \"keep\".\n- keep the other columns\n\n## Importing data file\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_read <- list.files(\n    \"ex_data\",\n    full.names = TRUE\n) |>\n    map_dfr(\n        read_table\n    )\n#> Warning: Missing column names filled in: 'X39' [39]\n#> \n#> ── Column specification ────────────────────────────────────────────────────────\n#> cols(\n#>   .default = col_double(),\n#>   DATE = col_date(format = \"\"),\n#>   TIME = col_time(format = \"\"),\n#>   X39 = col_logical()\n#> )\n#> ℹ Use `spec()` for the full column specifications.\n#> Warning: Missing column names filled in: 'X39' [39]\n#> \n#> ── Column specification ────────────────────────────────────────────────────────\n#> cols(\n#>   .default = col_double(),\n#>   DATE = col_date(format = \"\"),\n#>   TIME = col_time(format = \"\"),\n#>   X39 = col_logical()\n#> )\n#> ℹ Use `spec()` for the full column specifications.\n#> Warning: Missing column names filled in: 'X39' [39]\n#> \n#> ── Column specification ────────────────────────────────────────────────────────\n#> cols(\n#>   .default = col_double(),\n#>   DATE = col_date(format = \"\"),\n#>   TIME = col_time(format = \"\"),\n#>   X39 = col_logical()\n#> )\n#> ℹ Use `spec()` for the full column specifications.\n#> Warning: Missing column names filled in: 'X39' [39]\n#> \n#> ── Column specification ────────────────────────────────────────────────────────\n#> cols(\n#>   .default = col_double(),\n#>   DATE = col_date(format = \"\"),\n#>   TIME = col_time(format = \"\"),\n#>   X39 = col_logical()\n#> )\n#> ℹ Use `spec()` for the full column specifications.\n#> Warning: Missing column names filled in: 'X39' [39]\n#> \n#> ── Column specification ────────────────────────────────────────────────────────\n#> cols(\n#>   .default = col_double(),\n#>   DATE = col_date(format = \"\"),\n#>   TIME = col_time(format = \"\"),\n#>   X39 = col_logical()\n#> )\n#> ℹ Use `spec()` for the full column specifications.\n#> Warning: Missing column names filled in: 'X39' [39]\n#> \n#> ── Column specification ────────────────────────────────────────────────────────\n#> cols(\n#>   .default = col_double(),\n#>   DATE = col_date(format = \"\"),\n#>   TIME = col_time(format = \"\"),\n#>   X39 = col_logical()\n#> )\n#> ℹ Use `spec()` for the full column specifications.\n#> Warning: Missing column names filled in: 'X39' [39]\n#> \n#> ── Column specification ────────────────────────────────────────────────────────\n#> cols(\n#>   .default = col_double(),\n#>   DATE = col_date(format = \"\"),\n#>   TIME = col_time(format = \"\"),\n#>   X39 = col_logical()\n#> )\n#> ℹ Use `spec()` for the full column specifications.\n#> Warning: Missing column names filled in: 'X39' [39]\n#> \n#> ── Column specification ────────────────────────────────────────────────────────\n#> cols(\n#>   .default = col_double(),\n#>   DATE = col_date(format = \"\"),\n#>   TIME = col_time(format = \"\"),\n#>   X39 = col_logical()\n#> )\n#> ℹ Use `spec()` for the full column specifications.\n#> Warning: Missing column names filled in: 'X39' [39]\n#> \n#> ── Column specification ────────────────────────────────────────────────────────\n#> cols(\n#>   .default = col_double(),\n#>   DATE = col_date(format = \"\"),\n#>   TIME = col_time(format = \"\"),\n#>   X39 = col_logical()\n#> )\n#> ℹ Use `spec()` for the full column specifications.\n#> Warning: Missing column names filled in: 'X39' [39]\n#> \n#> ── Column specification ────────────────────────────────────────────────────────\n#> cols(\n#>   .default = col_double(),\n#>   DATE = col_date(format = \"\"),\n#>   TIME = col_time(format = \"\"),\n#>   X39 = col_logical()\n#> )\n#> ℹ Use `spec()` for the full column specifications.\n#> Warning: Missing column names filled in: 'X39' [39]\n#> \n#> ── Column specification ────────────────────────────────────────────────────────\n#> cols(\n#>   .default = col_double(),\n#>   DATE = col_date(format = \"\"),\n#>   TIME = col_time(format = \"\"),\n#>   X39 = col_logical()\n#> )\n#> ℹ Use `spec()` for the full column specifications.\n#> Warning: Missing column names filled in: 'X39' [39]\n#> \n#> ── Column specification ────────────────────────────────────────────────────────\n#> cols(\n#>   .default = col_double(),\n#>   DATE = col_date(format = \"\"),\n#>   TIME = col_time(format = \"\"),\n#>   X39 = col_logical()\n#> )\n#> ℹ Use `spec()` for the full column specifications.\n#> Warning: 1 parsing failure.\n#> row col   expected     actual                                                  file\n#> 368  -- 39 columns 17 columns 'ex_data/JFAADS2294-20241212-034037-DataLog_User.dat'\n#> Warning: Missing column names filled in: 'X39' [39]\n#> \n#> ── Column specification ────────────────────────────────────────────────────────\n#> cols(\n#>   .default = col_double(),\n#>   DATE = col_date(format = \"\"),\n#>   TIME = col_time(format = \"\"),\n#>   X39 = col_logical()\n#> )\n#> ℹ Use `spec()` for the full column specifications.\n#> Warning: Missing column names filled in: 'X39' [39]\n#> \n#> ── Column specification ────────────────────────────────────────────────────────\n#> cols(\n#>   .default = col_double(),\n#>   DATE = col_date(format = \"\"),\n#>   TIME = col_time(format = \"\"),\n#>   X39 = col_logical()\n#> )\n#> ℹ Use `spec()` for the full column specifications.\n#> Warning: Missing column names filled in: 'X39' [39]\n#> \n#> ── Column specification ────────────────────────────────────────────────────────\n#> cols(\n#>   .default = col_double(),\n#>   DATE = col_date(format = \"\"),\n#>   TIME = col_time(format = \"\"),\n#>   X39 = col_logical()\n#> )\n#> ℹ Use `spec()` for the full column specifications.\n#> Warning: Missing column names filled in: 'X39' [39]\n#> \n#> ── Column specification ────────────────────────────────────────────────────────\n#> cols(\n#>   .default = col_double(),\n#>   DATE = col_date(format = \"\"),\n#>   TIME = col_time(format = \"\"),\n#>   X39 = col_logical()\n#> )\n#> ℹ Use `spec()` for the full column specifications.\n#> Warning: Missing column names filled in: 'X39' [39]\n#> \n#> ── Column specification ────────────────────────────────────────────────────────\n#> cols(\n#>   .default = col_double(),\n#>   DATE = col_date(format = \"\"),\n#>   TIME = col_time(format = \"\"),\n#>   X39 = col_logical()\n#> )\n#> ℹ Use `spec()` for the full column specifications.\n#> Warning: Missing column names filled in: 'X39' [39]\n#> \n#> ── Column specification ────────────────────────────────────────────────────────\n#> cols(\n#>   .default = col_double(),\n#>   DATE = col_date(format = \"\"),\n#>   TIME = col_time(format = \"\"),\n#>   X39 = col_logical()\n#> )\n#> ℹ Use `spec()` for the full column specifications.\n#> Warning: Missing column names filled in: 'X39' [39]\n#> \n#> ── Column specification ────────────────────────────────────────────────────────\n#> cols(\n#>   .default = col_double(),\n#>   DATE = col_date(format = \"\"),\n#>   TIME = col_time(format = \"\"),\n#>   X39 = col_logical()\n#> )\n#> ℹ Use `spec()` for the full column specifications.\n#> Warning: Missing column names filled in: 'X39' [39]\n#> \n#> ── Column specification ────────────────────────────────────────────────────────\n#> cols(\n#>   .default = col_double(),\n#>   DATE = col_date(format = \"\"),\n#>   TIME = col_time(format = \"\"),\n#>   X39 = col_logical()\n#> )\n#> ℹ Use `spec()` for the full column specifications.\n#> Warning: Missing column names filled in: 'X39' [39]\n#> \n#> ── Column specification ────────────────────────────────────────────────────────\n#> cols(\n#>   .default = col_double(),\n#>   DATE = col_date(format = \"\"),\n#>   TIME = col_time(format = \"\"),\n#>   X39 = col_logical()\n#> )\n#> ℹ Use `spec()` for the full column specifications.\n#> Warning: Missing column names filled in: 'X39' [39]\n#> \n#> ── Column specification ────────────────────────────────────────────────────────\n#> cols(\n#>   .default = col_double(),\n#>   DATE = col_date(format = \"\"),\n#>   TIME = col_time(format = \"\"),\n#>   X39 = col_logical()\n#> )\n#> ℹ Use `spec()` for the full column specifications.\n#> Warning: Missing column names filled in: 'X39' [39]\n#> \n#> ── Column specification ────────────────────────────────────────────────────────\n#> cols(\n#>   .default = col_double(),\n#>   DATE = col_date(format = \"\"),\n#>   TIME = col_time(format = \"\"),\n#>   X39 = col_logical()\n#> )\n#> ℹ Use `spec()` for the full column specifications.\n#> Warning: Missing column names filled in: 'X39' [39]\n#> \n#> ── Column specification ────────────────────────────────────────────────────────\n#> cols(\n#>   .default = col_double(),\n#>   DATE = col_date(format = \"\"),\n#>   TIME = col_time(format = \"\"),\n#>   X39 = col_logical()\n#> )\n#> ℹ Use `spec()` for the full column specifications.\n#> Warning: Missing column names filled in: 'X39' [39]\n#> \n#> ── Column specification ────────────────────────────────────────────────────────\n#> cols(\n#>   .default = col_double(),\n#>   DATE = col_date(format = \"\"),\n#>   TIME = col_time(format = \"\"),\n#>   X39 = col_logical()\n#> )\n#> ℹ Use `spec()` for the full column specifications.\n# read_table(\"ex_data/JFAADS2294-20241211-193921-DataLog_User.dat\")\n\ndata <- data_read |>\n    mutate(\n        f_datetime = as_datetime(paste(DATE, TIME))\n    ) |>\n    left_join(chamber_temp_pres, by = join_by(f_datetime == datetime)) |> # adding air temp and pressure here\n    select(f_datetime, CO2_dry, air_temp, pressure) # we keep it simple for now and work only on CO2\n\n# View(data)\n```\n:::\n\n\n\n\n\n# Processing the data\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(fluxible)\n\nconc <- flux_match(\n    raw_conc = data,\n    field_record = chamber_log,\n    f_datetime = f_datetime,\n    start_col = closing,\n    end_col = opening,\n    fixed_length = FALSE\n) |>\n    drop_na(CO2_dry)\n# View(conc)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nconc_fit <- flux_fitting(\n    conc_df = conc,\n    f_conc = CO2_dry,\n    fit_type = \"exp_zhao18\",\n    start_cut = 120,\n    end_cut = 240\n)\n#> Cutting measurements...\n#> Estimating starting parameters for optimization...\n#> Optimizing fitting parameters...\n#> Calculating fits and slopes...\n#> Done.\n#> Warning in flux_fitting(conc_df = conc, f_conc = CO2_dry, fit_type = \"exp_zhao18\", : \n#>  fluxID 2 : slope was estimated on 493 points out of 496 seconds\n#>  fluxID 20 : slope was estimated on 453 points out of 488 seconds\n#>  fluxID 22 : slope was estimated on 492 points out of 497 seconds\n#>  fluxID 23 : slope was estimated on 483 points out of 489 seconds\n#>  fluxID 40 : slope is NA, most likely an issue with the model optimization.\n#>         Check your data or use a different model.\n# View(conc_fit)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nconc_flags <- flux_quality(\n    slopes_df = conc_fit,\n    f_conc = CO2_dry,\n    force_discard = c(\n        1:21,\n        40:43\n    )\n)\n#> \n#>  Total number of measurements: 48\n#> \n#>  force_discard \t 24 \t 50 %\n#>  ok \t 18 \t 38 %\n#>  zero \t 4 \t 8 %\n#>  start_error \t 1 \t 2 %\n#>  discard \t 1 \t 2 %\n#>  no_data \t 0 \t 0 %\n#>  force_ok \t 0 \t 0 %\n#>  force_zero \t 0 \t 0 %\n#>  force_lm \t 0 \t 0 %\n#>  no_slope \t 0 \t 0 %\n# View(conc_flags)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nflux_plot(\n    conc_flags,\n    f_conc = CO2_dry,\n    print_plot = FALSE,\n    output = \"pdfpages\",\n    scale_x_datetime_args = list(\n        date_breaks = \"3 min\",\n        minor_breaks = \"1 min\",\n        date_label = \"%e/%m \\n %H:%M\"\n    )\n    )\n\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nfluxible_df <- flux_calc(\n    slopes_df = conc_flags,\n    slope_col = f_slope_corr,\n    temp_air_col = air_temp,\n    setup_volume = 4.756, # not sure if correct, found on website\n    plot_area = 0.032, # to check\n    # atm_pressure = 1,\n    atm_pressure = pressure,\n    conc_unit = \"ppm\",\n    flux_unit = \"umol/m2/s\",\n    cols_keep = \"f_quality_flag\"\n) |>\n    rename(\n        fluxible_flux = \"f_flux\"\n    )\n#> Cutting data according to 'keep_arg'...\n#> Averaging air temperature for each flux...\n#> Creating a df with the columns from 'cols_keep' argument...\n#> Calculating fluxes...\n#> R constant set to 0.082057\n#> Concentration was measured in ppm\n#> Fluxes are in umol/m2/s\n# View(fluxible_df)\n\nsaveRDS(fluxible_df, \"compare_data/fluxible_df.rds\")\n```\n:::\n",
    "supporting": [
      "tutorial_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}