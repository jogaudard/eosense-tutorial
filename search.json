[
  {
    "objectID": "tutorial.html",
    "href": "tutorial.html",
    "title": "Full tutorial",
    "section": "",
    "text": "In this section we will use the data in the ex_data folder. More ressources on data import are available in this vignette on the fluxible website.\n\n\nImporting the log and turning it into a dataframe with chamber ID (port nb), chamber closing time and re-opening time.\n\nlibrary(tidyverse)\n\n# building col names\nchamber_colnames &lt;- c(\n    \"port\", \"valvestatus\", \"chamberstatus\",\n    \"aux1\", \"aux2\", \"aux3\", \"aux4\", \"aux5\",\n    \"temperaturev\", \"pressure\"\n    )\nlog_colnames &lt;- c(\n    \"epochtime\",\n    rep(chamber_colnames, times = 12)\n)\n\nchamber_log_read &lt;- list.files(\n    \"ex_log\",\n    full.names = TRUE\n) |&gt;\n    map_dfr(\n        read_log,\n        col_names = log_colnames\n    )\n# read_log(\"ex_log/FRMonitor_0012.log\", col_names = log_colnames)\n# repeated colnames are normal\nchamber_log_all &lt;- chamber_log_read |&gt;\n    pivot_longer(!c(epochtime), names_to = c(\".value\", \"variable\"), names_sep = \"_\") |&gt;\n    filter(\n        port %in% c(1:12) # we filter out all the rows with port -1\n    ) |&gt;\n    arrange(epochtime) |&gt; # just to be sure\n    mutate( # without grouping\n        chamber = case_when(\n            chamberstatus %in% c(1:3) ~ \"open\",\n            chamberstatus == 0 ~ \"closed\"\n        ),\n        change_id = consecutive_id(port, chamberstatus), #detecting if same port but new measurement\n        datetime = as_datetime(epochtime) # we work in datetime\n    ) |&gt;\n    filter(\n        # chamberstatus %in% c(1:3) # very conservative, we can adjust the focus window later in flux_fitting\n        chamberstatus == 1\n        # valvestatus == 10\n    ) |&gt;\n    mutate(\n        measurement_id = consecutive_id(change_id) # just getting rid of the missing id after filter\n        )\n    \nchamber_log &lt;- chamber_log_all |&gt;\n    mutate(\n        .by = c(measurement_id),\n        closing = min(datetime) - 300, # can be recut in flux_fitting, but so we see better\n        opening = max(datetime) + 300\n    ) |&gt;\n    select(measurement_id, port, closing, opening) |&gt;\n    distinct()\n\n# We make a separate df for temp and pressure so we keep the 4 seconds reads\nchamber_temp_pres &lt;- chamber_log_all |&gt;\n    mutate(\n        air_temp = temperaturev * 15, # need to ask the exact conversion factor, for now this one makes sense\n        pressure = pressure / 101.325 # need atm for fluxible\n    ) |&gt;\n    select(datetime, air_temp, pressure)\n\n# View(chamber_log_all)\n\nPossible improvements\n\ntake into account the chamber status better and use it to by-pass the start and end cuts in flux_fitting. Opening and closing status would be “cut” (not used for fitting but visible on the plot), and fully open would be “keep”.\nkeep the other columns\nBecause of the inconsistant offset between the closing of the chamber and the start of the flux, it is difficult to make a proper record of start/end of fluxes.\n\n\n\n\n\ndata_read &lt;- list.files(\n    \"ex_data\",\n    full.names = TRUE\n) |&gt;\n    map_dfr(\n        read_table\n    )\n# read_table(\"ex_data/JFAADS2294-20241211-193921-DataLog_User.dat\")\n\ndata &lt;- data_read |&gt;\n    mutate(\n        f_datetime = as_datetime(paste(DATE, TIME))\n    ) |&gt;\n    left_join(chamber_temp_pres, by = join_by(f_datetime == datetime)) |&gt; # adding air temp and pressure here\n    select(f_datetime, CO2_dry, air_temp, pressure) # we keep it simple for now and work only on CO2\n\n# View(data)"
  },
  {
    "objectID": "tutorial.html#importing-log-file",
    "href": "tutorial.html#importing-log-file",
    "title": "Full tutorial",
    "section": "",
    "text": "Importing the log and turning it into a dataframe with chamber ID (port nb), chamber closing time and re-opening time.\n\nlibrary(tidyverse)\n\n# building col names\nchamber_colnames &lt;- c(\n    \"port\", \"valvestatus\", \"chamberstatus\",\n    \"aux1\", \"aux2\", \"aux3\", \"aux4\", \"aux5\",\n    \"temperaturev\", \"pressure\"\n    )\nlog_colnames &lt;- c(\n    \"epochtime\",\n    rep(chamber_colnames, times = 12)\n)\n\nchamber_log_read &lt;- list.files(\n    \"ex_log\",\n    full.names = TRUE\n) |&gt;\n    map_dfr(\n        read_log,\n        col_names = log_colnames\n    )\n# read_log(\"ex_log/FRMonitor_0012.log\", col_names = log_colnames)\n# repeated colnames are normal\nchamber_log_all &lt;- chamber_log_read |&gt;\n    pivot_longer(!c(epochtime), names_to = c(\".value\", \"variable\"), names_sep = \"_\") |&gt;\n    filter(\n        port %in% c(1:12) # we filter out all the rows with port -1\n    ) |&gt;\n    arrange(epochtime) |&gt; # just to be sure\n    mutate( # without grouping\n        chamber = case_when(\n            chamberstatus %in% c(1:3) ~ \"open\",\n            chamberstatus == 0 ~ \"closed\"\n        ),\n        change_id = consecutive_id(port, chamberstatus), #detecting if same port but new measurement\n        datetime = as_datetime(epochtime) # we work in datetime\n    ) |&gt;\n    filter(\n        # chamberstatus %in% c(1:3) # very conservative, we can adjust the focus window later in flux_fitting\n        chamberstatus == 1\n        # valvestatus == 10\n    ) |&gt;\n    mutate(\n        measurement_id = consecutive_id(change_id) # just getting rid of the missing id after filter\n        )\n    \nchamber_log &lt;- chamber_log_all |&gt;\n    mutate(\n        .by = c(measurement_id),\n        closing = min(datetime) - 300, # can be recut in flux_fitting, but so we see better\n        opening = max(datetime) + 300\n    ) |&gt;\n    select(measurement_id, port, closing, opening) |&gt;\n    distinct()\n\n# We make a separate df for temp and pressure so we keep the 4 seconds reads\nchamber_temp_pres &lt;- chamber_log_all |&gt;\n    mutate(\n        air_temp = temperaturev * 15, # need to ask the exact conversion factor, for now this one makes sense\n        pressure = pressure / 101.325 # need atm for fluxible\n    ) |&gt;\n    select(datetime, air_temp, pressure)\n\n# View(chamber_log_all)\n\nPossible improvements\n\ntake into account the chamber status better and use it to by-pass the start and end cuts in flux_fitting. Opening and closing status would be “cut” (not used for fitting but visible on the plot), and fully open would be “keep”.\nkeep the other columns\nBecause of the inconsistant offset between the closing of the chamber and the start of the flux, it is difficult to make a proper record of start/end of fluxes."
  },
  {
    "objectID": "tutorial.html#importing-data-file",
    "href": "tutorial.html#importing-data-file",
    "title": "Full tutorial",
    "section": "",
    "text": "data_read &lt;- list.files(\n    \"ex_data\",\n    full.names = TRUE\n) |&gt;\n    map_dfr(\n        read_table\n    )\n# read_table(\"ex_data/JFAADS2294-20241211-193921-DataLog_User.dat\")\n\ndata &lt;- data_read |&gt;\n    mutate(\n        f_datetime = as_datetime(paste(DATE, TIME))\n    ) |&gt;\n    left_join(chamber_temp_pres, by = join_by(f_datetime == datetime)) |&gt; # adding air temp and pressure here\n    select(f_datetime, CO2_dry, air_temp, pressure) # we keep it simple for now and work only on CO2\n\n# View(data)"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Tutorials to process Eosense flux chambers data",
    "section": "",
    "text": "This website presents how to use the fluxible R package to process data collected with Eosense ecosystem gas flux chambers.\n\nOverview"
  },
  {
    "objectID": "comparison.html",
    "href": "comparison.html",
    "title": "Comparison with eosAC-T/O",
    "section": "",
    "text": "library(tidyverse)\n\nfluxes_eos_read &lt;- read_csv(\"compare_data/chamber_data.csv\")\n\nfluxes_eos &lt;- fluxes_eos_read |&gt;\n    mutate(\n        date = as.Date(`Julian Day`, origin = as.Date(\"2024-01-01\")),\n        seconds = (`Julian Day` - floor(`Julian Day`)) * 24 * 3600,\n        time = hms::as_hms(seconds),\n        datetime = as_datetime(paste(date, time))\n    ) |&gt;\n    select(datetime, everything())\n\n# View(fluxes_eos)\n\n\nfluxible_df &lt;- readRDS(\"compare_data/fluxible_df.rds\")\n\nfluxes_eos_id &lt;- fluxes_eos |&gt;\n  # filter(\n  #   datetime &gt; ymd_hms(\"2024-12-12 00:00:01\")\n  # ) |&gt;\n  arrange(datetime) |&gt;\n  rowid_to_column(\"id\")\n\nfluxible_df_id &lt;- fluxible_df |&gt;\n  # filter(\n  #   f_datetime &gt; ymd_hms(\"2024-12-12 00:03:01\")\n  # ) |&gt;\n  arrange(f_datetime) |&gt;\n  rowid_to_column(\"id\")\n\ncomparison_fluxes &lt;- left_join(fluxible_df_id, fluxes_eos_id, by = \"id\") |&gt;\n  rename(\n    eos_flux = `Flux CO2 (L) (umol/m^2/s)`,\n    eos_slope = `f (Linear Slope)`\n  )\n\ncomparison_fluxes2 &lt;- full_join(fluxible_df, fluxes_eos, by = join_by(\"f_datetime\" == \"datetime\")) |&gt;\n  rename(\n    eos_flux = `Flux CO2 (L) (umol/m^2/s)`\n  ) |&gt;\n  select(f_datetime, fluxible_flux, eos_flux) |&gt;\n  pivot_longer(!f_datetime, names_to = \"method\", values_to = \"flux\") |&gt;\n  drop_na(flux) |&gt;\n  arrange(f_datetime)\n\ncomparison_fluxes3 &lt;- full_join(fluxible_df, fluxes_eos, by = join_by(\"f_datetime\" == \"datetime\")) |&gt;\n  rename(\n    eos_slope = `f (Linear Slope)`\n  ) |&gt;\n  select(f_datetime, fluxible_slope, eos_slope) |&gt;\n  # pivot_longer(!f_datetime, names_to = \"method\", values_to = \"slope\") |&gt;\n  # drop_na(slope) |&gt;\n  arrange(f_datetime)\n\n# View(comparison_fluxes3)\n\n\n\n\n\n\n\n\n\nFigure 1: Comparing the slopes because I am quite sure I have the wrong area, volume and temperature.\n\n\n\n\n\n\nThere are fluxes in the EOsense dataset that were not produced by fluxible. We identify them and remove them before pairing. \n\n\nfluxible_df &lt;- readRDS(\"compare_data/fluxible_df.rds\")\n\nfluxes_eos_id &lt;- fluxes_eos |&gt;\n  arrange(datetime) |&gt;\n  rowid_to_column(\"eos_id\") |&gt;\n  filter(\n    !(eos_id %in% c(12, 22, 52)) # those are \"in between\" fluxes in the fluxible dataset\n  ) |&gt;\n  rowid_to_column(\"id\")\n\nfluxible_df_id &lt;- fluxible_df |&gt;\n  arrange(f_datetime) |&gt;\n  rowid_to_column(\"id\")\n\ncomparison_fluxes4 &lt;- left_join(fluxible_df_id, fluxes_eos_id, by = \"id\") |&gt;\n  rename(\n    eos_flux = `Flux CO2 (L) (umol/m^2/s)`,\n    eos_slope = `f (Linear Slope)`\n  )\n\n# View(comparison_fluxes4)\n\n\n\n\n\n\n\n\n\nFigure 2: Comparing the linear slopes because I am quite sure I have the wrong area, volume and temperature so fluxes are off. x-axis is slopes processed with fluxible and y-axis is corresponding EOsense control data, lable are fluxid produced by fluxible."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  }
]